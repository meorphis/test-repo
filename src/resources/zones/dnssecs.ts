// File generated from our OpenAPI spec by Stainless.

import * as Core from 'cloudflare/core';
import { APIResource } from 'cloudflare/resource';
import * as DnssecsAPI from 'cloudflare/resources/zones/dnssecs';

export class Dnssecs extends APIResource {
  /**
   * Details about DNSSEC status and configuration.
   */
  retrieve(zoneIdentifier: string, options?: Core.RequestOptions): Core.APIPromise<DnssecRetrieveResponse> {
    return this._client.get(`/zones/${zoneIdentifier}/dnssec`, options);
  }

  /**
   * Enable or disable DNSSEC.
   */
  update(
    zoneIdentifier: string,
    body: DnssecUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<DnssecUpdateResponse> {
    return this._client.patch(`/zones/${zoneIdentifier}/dnssec`, { body, ...options });
  }

  /**
   * Delete DNSSEC.
   */
  delete(zoneIdentifier: string, options?: Core.RequestOptions): Core.APIPromise<DnssecDeleteResponse> {
    return this._client.delete(`/zones/${zoneIdentifier}/dnssec`, options);
  }
}

export interface DnssecRetrieveResponse {
  errors?: Array<DnssecRetrieveResponse.Error>;

  messages?: Array<DnssecRetrieveResponse.Message>;

  result?: DnssecRetrieveResponse.Result;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace DnssecRetrieveResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }

  export interface Result {
    /**
     * Algorithm key code.
     */
    algorithm?: string | null;

    /**
     * Digest hash.
     */
    digest?: string | null;

    /**
     * Type of digest algorithm.
     */
    digest_algorithm?: string | null;

    /**
     * Coded type for digest algorithm.
     */
    digest_type?: string | null;

    /**
     * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
     * to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
     * records (except those automatically generated by Cloudflare) to be added to the
     * zone.
     *
     * See
     * [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
     * for details.
     */
    dnssec_multi_signer?: boolean;

    /**
     * If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
     * signatures from an external provider, without requiring Cloudflare to sign any
     * records on the fly.
     *
     * Note that this feature has some limitations. See
     * [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
     * for details.
     */
    dnssec_presigned?: boolean;

    /**
     * Full DS record.
     */
    ds?: string | null;

    /**
     * Flag for DNSSEC record.
     */
    flags?: number | null;

    /**
     * Code for key tag.
     */
    key_tag?: number | null;

    /**
     * Algorithm key type.
     */
    key_type?: string | null;

    /**
     * When DNSSEC was last modified.
     */
    modified_on?: string | null;

    /**
     * Public key for DS record.
     */
    public_key?: string | null;

    /**
     * Status of DNSSEC, based on user-desired state and presence of necessary records.
     */
    status?: 'active' | 'pending' | 'disabled' | 'pending-disabled' | 'error';
  }
}

export interface DnssecUpdateResponse {
  errors?: Array<DnssecUpdateResponse.Error>;

  messages?: Array<DnssecUpdateResponse.Message>;

  result?: DnssecUpdateResponse.Result;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace DnssecUpdateResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }

  export interface Result {
    /**
     * Algorithm key code.
     */
    algorithm?: string | null;

    /**
     * Digest hash.
     */
    digest?: string | null;

    /**
     * Type of digest algorithm.
     */
    digest_algorithm?: string | null;

    /**
     * Coded type for digest algorithm.
     */
    digest_type?: string | null;

    /**
     * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
     * to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
     * records (except those automatically generated by Cloudflare) to be added to the
     * zone.
     *
     * See
     * [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
     * for details.
     */
    dnssec_multi_signer?: boolean;

    /**
     * If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
     * signatures from an external provider, without requiring Cloudflare to sign any
     * records on the fly.
     *
     * Note that this feature has some limitations. See
     * [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
     * for details.
     */
    dnssec_presigned?: boolean;

    /**
     * Full DS record.
     */
    ds?: string | null;

    /**
     * Flag for DNSSEC record.
     */
    flags?: number | null;

    /**
     * Code for key tag.
     */
    key_tag?: number | null;

    /**
     * Algorithm key type.
     */
    key_type?: string | null;

    /**
     * When DNSSEC was last modified.
     */
    modified_on?: string | null;

    /**
     * Public key for DS record.
     */
    public_key?: string | null;

    /**
     * Status of DNSSEC, based on user-desired state and presence of necessary records.
     */
    status?: 'active' | 'pending' | 'disabled' | 'pending-disabled' | 'error';
  }
}

export interface DnssecDeleteResponse {
  errors?: Array<DnssecDeleteResponse.Error>;

  messages?: Array<DnssecDeleteResponse.Message>;

  result?: string;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace DnssecDeleteResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }
}

export interface DnssecUpdateParams {
  /**
   * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
   * to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
   * records (except those automatically generated by Cloudflare) to be added to the
   * zone.
   *
   * See
   * [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
   * for details.
   */
  dnssec_multi_signer?: boolean;

  /**
   * If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
   * signatures from an external provider, without requiring Cloudflare to sign any
   * records on the fly.
   *
   * Note that this feature has some limitations. See
   * [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
   * for details.
   */
  dnssec_presigned?: boolean;

  /**
   * Status of DNSSEC, based on user-desired state and presence of necessary records.
   */
  status?: 'active' | 'disabled';
}

export namespace Dnssecs {
  export import DnssecRetrieveResponse = DnssecsAPI.DnssecRetrieveResponse;
  export import DnssecUpdateResponse = DnssecsAPI.DnssecUpdateResponse;
  export import DnssecDeleteResponse = DnssecsAPI.DnssecDeleteResponse;
  export import DnssecUpdateParams = DnssecsAPI.DnssecUpdateParams;
}
