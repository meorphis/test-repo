// File generated from our OpenAPI spec by Stainless.

import * as Core from 'cloudflare/core';
import { APIResource } from 'cloudflare/resource';
import * as LocationsAPI from 'cloudflare/resources/accounts/gateway/locations';

export class Locations extends APIResource {
  /**
   * Fetches a single Zero Trust Gateway location.
   */
  retrieve(
    identifier: unknown,
    uuid: unknown,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationRetrieveResponse> {
    return this._client.get(`/accounts/${identifier}/gateway/locations/${uuid}`, options);
  }

  /**
   * Updates a configured Zero Trust Gateway location.
   */
  update(
    identifier: unknown,
    uuid: unknown,
    body: LocationUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationUpdateResponse> {
    return this._client.put(`/accounts/${identifier}/gateway/locations/${uuid}`, { body, ...options });
  }

  /**
   * Deletes a configured Zero Trust Gateway location.
   */
  delete(
    identifier: unknown,
    uuid: unknown,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationDeleteResponse> {
    return this._client.delete(`/accounts/${identifier}/gateway/locations/${uuid}`, options);
  }

  /**
   * Creates a new Zero Trust Gateway location.
   */
  zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(
    identifier: unknown,
    body: LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse> {
    return this._client.post(`/accounts/${identifier}/gateway/locations`, { body, ...options });
  }

  /**
   * Fetches Zero Trust Gateway locations for an account.
   */
  zeroTrustGatewayLocationsListZeroTrustGatewayLocations(
    identifier: unknown,
    options?: Core.RequestOptions,
  ): Core.APIPromise<LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse> {
    return this._client.get(`/accounts/${identifier}/gateway/locations`, options);
  }
}

export interface LocationRetrieveResponse {
  errors?: Array<LocationRetrieveResponse.Error>;

  messages?: Array<LocationRetrieveResponse.Message>;

  result?: LocationRetrieveResponse.Result;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace LocationRetrieveResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }

  export interface Result {
    id?: unknown;

    /**
     * True if the location is the default location.
     */
    client_default?: boolean;

    created_at?: string;

    /**
     * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
     * by Gateway.
     */
    doh_subdomain?: string;

    /**
     * True if the location needs to resolve EDNS queries.
     */
    ecs_support?: boolean;

    /**
     * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
     * counted as the request under this location. This field is auto-generated by
     * Gateway.
     */
    ip?: string;

    /**
     * The name of the location.
     */
    name?: string;

    /**
     * A list of network ranges that requests from this location would originate from.
     */
    networks?: Array<Result.Network>;

    updated_at?: string;
  }

  export namespace Result {
    export interface Network {
      /**
       * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
       */
      network: string;
    }
  }
}

export interface LocationUpdateResponse {
  errors?: Array<LocationUpdateResponse.Error>;

  messages?: Array<LocationUpdateResponse.Message>;

  result?: LocationUpdateResponse.Result;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace LocationUpdateResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }

  export interface Result {
    id?: unknown;

    /**
     * True if the location is the default location.
     */
    client_default?: boolean;

    created_at?: string;

    /**
     * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
     * by Gateway.
     */
    doh_subdomain?: string;

    /**
     * True if the location needs to resolve EDNS queries.
     */
    ecs_support?: boolean;

    /**
     * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
     * counted as the request under this location. This field is auto-generated by
     * Gateway.
     */
    ip?: string;

    /**
     * The name of the location.
     */
    name?: string;

    /**
     * A list of network ranges that requests from this location would originate from.
     */
    networks?: Array<Result.Network>;

    updated_at?: string;
  }

  export namespace Result {
    export interface Network {
      /**
       * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
       */
      network: string;
    }
  }
}

export interface LocationDeleteResponse {
  errors?: Array<LocationDeleteResponse.Error>;

  messages?: Array<LocationDeleteResponse.Message>;

  result?: unknown;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace LocationDeleteResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }
}

export interface LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse {
  errors?: Array<LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse.Error>;

  messages?: Array<LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse.Message>;

  result?: LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse.Result;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }

  export interface Result {
    id?: unknown;

    /**
     * True if the location is the default location.
     */
    client_default?: boolean;

    created_at?: string;

    /**
     * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
     * by Gateway.
     */
    doh_subdomain?: string;

    /**
     * True if the location needs to resolve EDNS queries.
     */
    ecs_support?: boolean;

    /**
     * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
     * counted as the request under this location. This field is auto-generated by
     * Gateway.
     */
    ip?: string;

    /**
     * The name of the location.
     */
    name?: string;

    /**
     * A list of network ranges that requests from this location would originate from.
     */
    networks?: Array<Result.Network>;

    updated_at?: string;
  }

  export namespace Result {
    export interface Network {
      /**
       * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
       */
      network: string;
    }
  }
}

export interface LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse {
  errors?: Array<LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse.Error>;

  messages?: Array<LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse.Message>;

  result?: Array<LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse.Result>;

  result_info?: LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse.ResultInfo;

  /**
   * Whether the API call was successful
   */
  success?: true;
}

export namespace LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse {
  export interface Error {
    code: number;

    message: string;
  }

  export interface Message {
    code: number;

    message: string;
  }

  export interface Result {
    id?: unknown;

    /**
     * True if the location is the default location.
     */
    client_default?: boolean;

    created_at?: string;

    /**
     * The DNS over HTTPS domain to send DNS requests to. This field is auto-generated
     * by Gateway.
     */
    doh_subdomain?: string;

    /**
     * True if the location needs to resolve EDNS queries.
     */
    ecs_support?: boolean;

    /**
     * IPV6 destination ip assigned to this location. DNS requests sent to this IP will
     * counted as the request under this location. This field is auto-generated by
     * Gateway.
     */
    ip?: string;

    /**
     * The name of the location.
     */
    name?: string;

    /**
     * A list of network ranges that requests from this location would originate from.
     */
    networks?: Array<Result.Network>;

    updated_at?: string;
  }

  export namespace Result {
    export interface Network {
      /**
       * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
       */
      network: string;
    }
  }

  export interface ResultInfo {
    /**
     * Total number of results for the requested service
     */
    count?: number;

    /**
     * Current page within paginated list of results
     */
    page?: number;

    /**
     * Number of results per page of results
     */
    per_page?: number;

    /**
     * Total results available without any search parameters
     */
    total_count?: number;
  }
}

export interface LocationUpdateParams {
  /**
   * The name of the location.
   */
  name: string;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationUpdateParams.Network>;
}

export namespace LocationUpdateParams {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export interface LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationParams {
  /**
   * The name of the location.
   */
  name: string;

  /**
   * True if the location is the default location.
   */
  client_default?: boolean;

  /**
   * True if the location needs to resolve EDNS queries.
   */
  ecs_support?: boolean;

  /**
   * A list of network ranges that requests from this location would originate from.
   */
  networks?: Array<LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationParams.Network>;
}

export namespace LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationParams {
  export interface Network {
    /**
     * The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
     */
    network: string;
  }
}

export namespace Locations {
  export import LocationRetrieveResponse = LocationsAPI.LocationRetrieveResponse;
  export import LocationUpdateResponse = LocationsAPI.LocationUpdateResponse;
  export import LocationDeleteResponse = LocationsAPI.LocationDeleteResponse;
  export import LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse = LocationsAPI.LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationResponse;
  export import LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse = LocationsAPI.LocationZeroTrustGatewayLocationsListZeroTrustGatewayLocationsResponse;
  export import LocationUpdateParams = LocationsAPI.LocationUpdateParams;
  export import LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationParams = LocationsAPI.LocationZeroTrustGatewayLocationsCreateZeroTrustGatewayLocationParams;
}
